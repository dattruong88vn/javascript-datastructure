
	DATA STRUCTURE JS
	
	https://replit.com/@dattruong88vn/Learn-Data-Structure-JS#index.js

	A. BUILD-IN DATA STRUCTURE
	
		1. Array:
			1.1 Đặc điểm:
				- Array là 1 data structure, nó có thể lưu trữ một bộ các giá trị.
				- Array có thể lưu trữ nhiều loại data khác nhau, như string, number, boolean, và objects có thể lưu trữ trên cùng 1 array.
				- Array có thể thay đổi chiều dài, không cần phải khai báo độ dài của array trước khi khởi tạo.
				- Chỉ số index của array bắt đầu từ 0 và tăng dần.
				- Array có tính lặp, nên có thể dùng vòng lặp để duyệt array.
				
			1.2. Big-O Time complexity
				- Insert/Remove from end: O(1);
				- Insert/Remove from beginning: O(n);
				- Access: O(1)
				- Search: O(n)
				- push/pop: O(1)
				- shift/unshift/concat/slice/splice: O(n)
				- forEach/map/filter/reduce: O(n)
		
		2. Object:
			2.1. Đặc điểm:
				- Object là một tập hợp các cặp key-value không có thứ tự. Key bắt buộc là một string hoặc symbol, trong khi đó value có thể là bất cứ loại dữ liệu nào.
				- Để lấy được value, phải gọi đúng tên key. Có thể sử dụng dấu chấm hoặc ngoặc nhọn để lấy được value.
					Ví dụ: obj.key hoặc obj[key]
				- Object không có tình lặp.
				
			2.2. Big-O Time complexity:
				- Insert: O(1)
				- Delete: O(1)
				- Access: O(1)
				- Search: O(n)
				- Object.keys: O(n)
				- Object.values: O(n)
				- Object.entries: O(n)
			
		3. Set
			3.1. Đặc điểm:
				- Set là data structure dùng để lưu trữ một tập hợp các giá trị. Các giá trị này phải unique (không được trùng)
				- Set giống Array có thể lưu trữ nhiều kiểu dữ liệu khác nhau.
				- Set không cần khai báo size
				- Set không có thứ tự index như Array
				- Set có tính lặp.
				
			3.2. So sánh với Array:
				- Array lưu được giá trị giống nhau, Set thì không chỉ lưu các giá trị unique;
				- Array có đánh chỉ mục index, Set thì không.
				- Search và Delete giá trị trong Set nhanh hơn Array.
		
		4. Map
			4.1. Đặc điểm:
				- Map là một bộ các cặp key-value có thứ tự. Cả key và value đều có thể là bất cứ kiểu dữ liệu nào.
				- Để lấy value, cần sử dụng key tương ứng.
				- Map có tính lặp.
			4.1. So sánh với Object:
				- Object không có thứ tự, Map thì có.
				- Key trong object phải là string hoặc symbol, trong khi map có thể là kiểu dữ liệu bất kì.
				- Object có prototype và một số key default, những key này có thể bị trùng với key do bạn tạo ra. Map không có bất kì key default nào.
				- Object không có tính lặp, Map thì có.
				- Số items trong một object có thể xác định thủ công trong khi Map chỉ có thể xác định thông qua thuộc tính size.
				- Khi lưu trữ, object có thể nhận giá trị là một function trong khi Map chỉ có giá trị đơn thuần là data.

	B. CUSTOM DATA STRUCTURE

		1. Stack:
			1.1. Đặc điểm:
				- Stack data structure là một tập hợp các phần tử theo trình tự và tuân theo quy tắc Last In First Out (LIFO).
				- Phần tử cuối cùng được thêm vào Stact là phần tử đầu tiên được lấy ra.
				- Stack là một kiểu dữ liệu trừu tượng, nó được định nghĩa theo cách nó hoạt động hơn là một hình mẫu toán học.
				- Stack data structure hỗ trợ 2 thao tác chính:
					+ Push: thêm 1 phần tử vào tập hợp.
					+ Pop: xóa phần tử được thêm vào gần nhất từ tập hợp.
			1.2. Sử dụng stack khi nào:
				- Browser history tracking
				- Undo operation when typing
				- Expression conversions
				- Call stack in Javascript runtime

		2. Queue
			2.1. Đặc điểm:
				- Queue data structure là một tập hợp các phần tử theo trình tự và tuân theo quy tắc First In First Out (FIFO).
				- Phần tử đầu tiên được thêm vào Queue là phần tử đầu tiên được lấy ra.
				- Queue là một kiểu dữ liệu trừu tượng, nó được định nghĩa theo cách nó hoạt động hơn là một hình mẫu toán học.
				- Queue data structure hỗ trợ 2 thao tác chính:
					+ Enqueue: thêm 1 phần tử vào cuối cùng của tập hợp.
					+ Dequeue: xóa phần tử đầu tiên của tập hợp.
			2.2. Sử dụng Queue khi nào:
				- Printers
				- CPU Task scheduling
				- Callback Queue in Javascript runtime

		3. Circular Queue:
			3.1. Đặc điểm:
				- Kích thước của Circular Queue cố định, và sử dụng một block bộ nhớ để lưu trữ. Và phần tử đầu tiên có liên kết với phần tử cuối cùng.
				- Cũng tương tự Circular Buffer hoặc Ring Buffer và tuân theo nguyên tắc FIFO.
				- Tái sử dụng vùng trống bộ nhớ khi thực hiện dequeue để thực hiện enqueue.
				- Sử dụng cho 2 thao tác:
					+ Enqueue: thêm 1 phần tử vào cuối cùng của tập hợp.
					+ Dequeue: xóa phần tử đầu tiên của tập hợp.
			3.2. Sử dụng Circular Queue:
				- Clock
				- Streaming data
				- Traffic lights

		4. Linked List:
			4.1. Đặc điểm:
				- Linked List là một cấu trúc dữ liệu tuyến tính, nó bao gồm một chuỗi các node liên kết với nhau.
				- Mỗi node chứa data và một pointer chỉ định đến node tiếp theo.
				- List các phần tử có thể dễ dàng thêm hoặc xóa mà không cần đánh dấu lại chỉ mục hay tổ chức lại toàn bộ cấu trúc.
				- Truy xuất đến một phần tử bất kỳ là điều không khả thi, và quá trình truy xuất đến 1 phần tử có độ phức tạp thời gian tuyến tính.
				- Linked List được sử dụng cho 3 thao tác:
					+ Insertion: thêm 1 phần tử vào đầu cuối hoặc một vị trí trong list.
					+ Deletion: xóa một phần tử dựa vào index hoặc giá trị
					+ Search: tìm một phần tử và trả về giá trị
			4.2. Ứng dụng của Linked List:
				- Tất cả các ứng dụng của stacks và queue là những ứng dụng Linked List;
				- Image viewer
				
		5. Hash Table
			5.1. Đặc điểm:
				- Hash table còn được gọi là Hash Map, là một kiểu cấu trúc dữ liệu được sử dụng để lưu trữ các cặp key-value
				- Với key, bạn có thể truy xuất được value của key đó một cách nhanh chóng.
				- JavaScript Object là một cấu trúc dữ liệu được triển khai từ Hash Table. Tuy nhiên, Object class có thể thêm vào các key của chính nó.
				Những keys mà bạn thêm vào có thể bị conflict và overwrite nhưng thuộc tính mặc định.
				- Maps cũng được giới thiệu từ năm 2015 cho phép bạn lưu trữ cặp key-value.
				- Viết một hash table là một câu hỏi phỏng vấn JavaScript rất phổ biến.
			5.2. Ứng dụng của Hash Table:
				- Được sử dụng khi cần thời gian tìm kiếm là constant và có yêu cầu Insertion.
				- Database indexing
				- Caches

		6. Tree
			6.1. Đặc điểm
				- Tree là dạng cấu trúc dữ liệu theo cấp bậc, bao gồm các nodes được liên kết thông qua edges.
				- Tree là dạng cấu trúc dữ liệu non-linear, nó khác với arrays, linked list, stacks và queues.
				- Với cấu trúc dạng linear, thời gian tìm kiếm tỷ lệ thuận với kích thước của dữ liệu. Tuy nhiên, với Tree với cấu trúc non-linear, cho phép nhanh chóng và dễ dàng tiếp cận dữ liệu.
				- Tree sẽ không có bất cứ vòng lặp hay cycles.
			6.2. Ứng dụng:
				- File systems hoặc cấu trúc thư mục.
				- Family Tree
				- Organisation tree.
				- DOM
				- Chat bots
				- Abtract syntax trees.
			6.3. Terminology
				- Parent Nodes/Child Nodes/Edges.
				- Root node: ko có Parent
				- Leaf nodes: ko có children
				- Sibling nodes: có chung parent
				- Path node: danh sách các node từ root đến node chỉ định.
				- Distance: số edges giữa 2 nodes.
				- Degree: số children của 1 node.
				- Depth: số edges từ root đến node chỉ định.
				- Height: số edges tối đa từ một leaf node đến node chỉ định.

		7. Binary Tree:
			7.1. Định nghĩa: là Tree với mỗi node chỉ có tối đa 2 children (được gọi là left và right)
			7.2. Binary Search Tree (BST):
				- Value ở child node bên TRÁI phải có giá trị NHỎ hơn parent node.
				- Value ở child node bên PHẢI phải có giá trị LỚN hơn parent node.
			7.3. Các phương thức của Binary Tree:
				- Insertion: thêm node vào tree
				- Search: tìm một node dựa vào value
				- DFS và BFS: duyệt qua tất cả các nodes của tree
				- Deletion: xóa một node dựa vào value.
			7.4. Ứng dụng:
				- Searching
				- Sorting
				- Tích hợp abstract data types như lookup tables và priority queues




